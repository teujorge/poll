generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id
  username      String?
  imageUrl      String?
  votes         Vote[]
  polls         Poll[]
  comments      Comment[]
  commentLikes  CommentLike[]
  following     Follow[]       @relation("Following")
  followers     Follow[]       @relation("Followers")
  bio           String?
  anon          Boolean
  notifications Notification[]
}

enum NotificationType {
  FOLLOW_PENDING
  FOLLOW_ACCEPTED
  COMMENT_REPLY
  COMMENT_LIKE
}

model Notification {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  userId      String
  type        NotificationType
  referenceId String // Generic reference ID to point to the source of the notification (could be Follow ID, Comment ID, etc.)
  seen        Boolean          @default(false)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, seen])
}

model Follow {
  id         String  @id @default(uuid())
  followerId String
  followedId String
  follower   User    @relation("Followers", fields: [followerId], references: [id])
  followed   User    @relation("Following", fields: [followedId], references: [id])
  accepted   Boolean @default(false)

  @@unique([followerId, followedId])
}

model Poll {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  expiresAt     DateTime?
  realtime      Boolean   @default(false)
  allowAnon     Boolean   @default(false)
  authorId      String
  title         String
  description   String
  controversial Boolean   @default(false)
  votes         Vote[]
  options       Option[]
  comments      Comment[]
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([authorId])
}

model Option {
  id     String @id @default(uuid())
  text   String
  pollId String
  votes  Vote[]
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  voterId   String
  pollId    String
  optionId  String
  voter     User     @relation(fields: [voterId], references: [id], onDelete: Cascade)
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([voterId, pollId, optionId])
  @@index([voterId])
  @@index([pollId])
  @@index([optionId])
}

model Comment {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  text      String
  authorId  String
  pollId    String
  parentId  String?
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  poll      Poll          @relation(fields: [pollId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation(name: "CommentToComment", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentToComment")
  likes     CommentLike[]

  @@index([authorId])
  @@index([pollId])
  @@index([parentId])
}

model CommentLike {
  id        String  @id @default(uuid())
  authorId  String
  commentId String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([authorId, commentId])
  @@index([authorId])
  @@index([commentId])
}
