generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SubTier {
  FREE
  PRO
}

model User {
  id                          String                       @id
  username                    String                       @unique
  imageUrl                    String?
  bio                         String?                      @db.VarChar(200)
  ads                         Boolean                      @default(true)
  private                     Boolean                      @default(false)
  clerkId                     String?                      @unique
  tier                        SubTier                      @default(FREE)
  votes                       Vote[]
  polls                       Poll[]
  pollLikes                   PollLike[]
  comments                    Comment[]
  commentLikes                CommentLike[]
  followees                   Follow[]                     @relation("Followee")
  followers                   Follow[]                     @relation("Follower")
  notificationsComment        NotificationComment[]
  notificationsCommentLike    NotificationCommentLike[]
  notificationsFollowPending  NotificationFollowPending[]  @relation("NotifyeeRelation")
  notificationsFollowAccepted NotificationFollowAccepted[] @relation("NotifyeeRelation")
  notificationsPollLike       NotificationPollLike[]

  @@index([username])
}

model Follow {
  id                           String                      @id @default(uuid())
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @updatedAt
  followerId                   String
  followeeId                   String
  follower                     User                        @relation("Follower", fields: [followerId], references: [id])
  followee                     User                        @relation("Followee", fields: [followeeId], references: [id])
  accepted                     Boolean                     @default(false)
  notificationFollowAcceptedId String?                     @unique
  notificationFollowPendingId  String?                     @unique
  notificationFollowAccepted   NotificationFollowAccepted?
  notificationFollowPending    NotificationFollowPending?

  @@unique([followerId, followeeId])
}

model NotificationFollowAccepted {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  notifyeeId String
  followId   String   @unique
  notifyee   User     @relation("NotifyeeRelation", fields: [notifyeeId], references: [id], onDelete: Cascade)
  follow     Follow   @relation(fields: [followId], references: [id], onDelete: Cascade)

  @@index([notifyeeId])
}

model NotificationFollowPending {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  notifyeeId String
  followId   String   @unique
  notifyee   User     @relation("NotifyeeRelation", fields: [notifyeeId], references: [id], onDelete: Cascade)
  follow     Follow   @relation(fields: [followId], references: [id], onDelete: Cascade)

  @@index([notifyeeId])
}

model Poll {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  authorId      String
  title         String     @db.VarChar(200)
  description   String?    @db.VarChar(200)
  private       Boolean
  anonymous     Boolean
  controversial Boolean    @default(false)
  sensitive     Boolean    @default(false)
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes         Vote[]
  options       Option[]
  comments      Comment[]
  likes         PollLike[]

  @@index([title])
  @@index([authorId])
}

model PollLike {
  id                    String                @id @default(uuid())
  createdAt             DateTime              @default(now())
  authorId              String
  pollId                String
  author                User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  poll                  Poll                  @relation(fields: [pollId], references: [id], onDelete: Cascade)
  notificationsPollLike NotificationPollLike?

  @@unique([authorId, pollId])
  @@index([authorId])
  @@index([pollId])
}

model NotificationPollLike {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  notifyeeId String
  pollLikeId String   @unique
  notifyee   User     @relation(fields: [notifyeeId], references: [id], onDelete: Cascade)
  pollLike   PollLike @relation(fields: [pollLikeId], references: [id], onDelete: Cascade)

  @@index([notifyeeId])
}

model Option {
  id        String  @id @default(uuid())
  text      String  @db.VarChar(200)
  imagePath String?
  pollId    String
  votes     Vote[]
  poll      Poll    @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@index([pollId])
}

model Vote {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  voterId   String
  pollId    String
  optionId  String
  voter     User     @relation(fields: [voterId], references: [id], onDelete: Cascade)
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([voterId, pollId, optionId])
  @@index([voterId])
  @@index([pollId])
  @@index([optionId])
}

model Comment {
  id                  String                @id @default(uuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  text                String                @db.VarChar(500)
  authorId            String
  pollId              String
  parentId            String?
  author              User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  poll                Poll                  @relation(fields: [pollId], references: [id], onDelete: Cascade)
  parent              Comment?              @relation(name: "CommentToComment", fields: [parentId], references: [id])
  replies             Comment[]             @relation("CommentToComment")
  likes               CommentLike[]
  notificationComment NotificationComment[]

  @@index([authorId])
  @@index([pollId])
  @@index([parentId])
}

model NotificationComment {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  notifyeeId String
  commentId  String
  user       User     @relation(fields: [notifyeeId], references: [id], onDelete: Cascade)
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([notifyeeId])
}

model CommentLike {
  id                      String                   @id @default(uuid())
  createdAt               DateTime                 @default(now())
  authorId                String
  commentId               String
  author                  User                     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment                 Comment                  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  notificationCommentLike NotificationCommentLike?

  @@unique([authorId, commentId])
  @@index([authorId])
  @@index([commentId])
}

model NotificationCommentLike {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  notifyeeId    String
  commentLikeId String      @unique
  notifyee      User        @relation(fields: [notifyeeId], references: [id], onDelete: Cascade)
  commentLike   CommentLike @relation(fields: [commentLikeId], references: [id], onDelete: Cascade)

  @@index([notifyeeId])
}
